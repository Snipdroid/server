# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
#       Stop all: docker-compose down
#
version: '3.7'

x-shared_environment: &shared_environment
  # HTTP_PROXY_ADDR: 127.0.0.1
  # HTTP_PROXY_PORT: 1080
  POSTGRES_URL: postgres://vapor_username:vapor_password@db:5432/vapor_username
  S3_BUCKET: apptracker
  S3_ACCESS_KEY_ID: 1lJv3MOZKjGsSao6
  S3_SECRET_ACCESS_KEY: aHeNDfGYDvQcEDFRIH3WZOSkfdYxnecf
  S3_ENDPOINT: http://example.com
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  
services:
  app:
    image: butanediol/apptracker:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    ports:
      - '8080:8080'
    volumes:
      - ./data:/app/data
    restart: always
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
  migrate:
    image: butanediol/apptracker:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
  revert:
    image: butanediol/apptracker:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0
  db:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: vapor_password
      POSTGRES_USER: vapor_username
    restart: always
    volumes:
      - ./pgdata:/var/lib/postgresql/data
  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8080
